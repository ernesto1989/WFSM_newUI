<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flows - <%=scenarioId%> </title>
    <link rel="stylesheet" type="text/css" href="https://rawgit.com/vitmalina/w2ui/master/dist/w2ui.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-uWxY/CJNBR+1zjPWmfnSnVxwRheevXITnMqoEIeG1LJrdI0GlVs/9cVSyPYXdcSF" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-kQtW33rZJAHjgefvhyyzcGF3C5TFyBQBA13V1RKPf4uH+bwyzQxZ6CmMZHmNBEfJ" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        html,
        body{
            height: 100%;
        }
        
        .container-fluid {
            height:93%
        }

        #content-grid {
            margin:auto;
            width: 98%;
            height: 95%;
            padding: 2px;
        }
    </style>  
    <script type="module">

        import { w2grid, w2utils, w2form, w2ui, w2popup, w2alert, w2confirm } from 'https://rawgit.com/vitmalina/w2ui/master/dist/w2ui.es6.min.js'
        let types =[];
        let isEdit = false;
        let role = '<%=user_info.role.name%>';
        let region = '<%=user_info.region.region_id%>';
        let region_name = '<%=user_info.region.name%>';
        let scenarioId = '<%=scenarioId%>';

        let maxNodeId = <%=nodes[nodes.length - 1].id%>; // getting the max node id currently

        $("document").ready(function(){
            $.get("/WF/api/getFlows/<%=scenarioId%>", function(data, status){
                let recs = data.records;
                grid.records = recs;
                grid.refresh();
            });
        });


        function getNewEmptyRecord(){
            <%if(nodes.length > 0) { %>            
                let record = {
                    origin: {id:'<%=nodes[0].id%>',text:'<%=nodes[0].node_id%>'},
                    destiny: {id:'<%=nodes[1].id%>',text:'<%=nodes[1].node_id%>'},
                    type: {id:'<%=flow_types[1].type_id%>',text:'<%=flow_types[1].type%>'},
                    min_flow:0.0,
                    current_flow:0.0,
                    max_flow:0.0
                }
            <%} else {%>
                let record = {
                    
                }
            <%}%>

            return record;
        }

        function getSelectedRecord(){
            let selected = grid.getSelection();
            let rec = grid.get(selected)[0];

            if(rec.origin === 0)
                rec.origin = maxNodeId + 1; // in order to show it on the screen

            if(rec.destiny === 0)
                rec.destiny = maxNodeId + 1; // in order to show it on the screen

            let record = {
                origin: {id:rec.origin,text:rec.origin_node},
                destiny: {id:rec.destiny,text:rec.destiny_node},
                type: {id:rec.type_id,text:rec.type},
                min_flow:rec.fmin,
                current_flow:rec.current_flow,
                max_flow:rec.fmax
            }

            return record;
        }


        function setForm(record){
            let rec = {
                new_scenario_id : '<%=scenarioId%>',
                new_origin :record.origin, 
                new_destiny : record.destiny,
                new_type: record.type,
                new_min_flow:record.min_flow,
                new_current_flow: record.current_flow,
                new_max_flow:record.max_flow
            };
            w2ui.flowsForm.record = rec;
            w2ui.flowsForm.refresh();

            if(isEdit){
                if(w2ui.flowsForm.record.new_type.id === 1){
                    w2ui.flowsForm.hide('new_min_flow','new_max_flow');
                }else{
                    w2ui.flowsForm.show('new_min_flow','new_max_flow');
                }
                w2ui.flowsForm.disable('new_type','new_origin','new_destiny');
            }else{
                w2ui.flowsForm.show('new_min_flow','new_max_flow');
                w2ui.flowsForm.enable('new_type','new_origin','new_destiny');
            }
        }


        function openFormPopup(){
            let flowsForm = new w2form({
                name: 'flowsForm',
                style: 'border: 0px; background-color: transparent;',
                fields: [
                    { field: 'new_scenario_id', type: 'text', required: true, 
                        html: { label: 'Scenario Id', attr: 'readonly style="width: 100%";' }
                    },
                    { field: 'new_type', type: 'list',
                        html: { label: 'Flow Type',attr: '<% if(user_info.role.name === "user" && scenarioId !== base_scenario ){ %> readonly <%}%> style="width: 100%"' },
                        options: { items: [
                            <% for(let i =0;i<flow_types.length;i++){%>
                            {id:<%=flow_types[i].type_id%>,text:'<%=flow_types[i].type%>'}, 
                            <%}%>
                        ]},
                    },
                    { field: 'new_origin', type: 'list',
                        html: { label: 'Origin',attr: '<% if(user_info.role.name === "user" && scenarioId === base_scenario ){ %> readonly <%}%> style="width: 100%"' },
                        options: { items: [
                            {id:(maxNodeId + 1),text:'IN'}, 
                            <% for(let i =0;i<nodes.length;i++){%>
                            {id:<%=nodes[i].id%>,text:'<%=nodes[i].node_id%>'}, 
                            <%}%>
                        ]},
                    },
                    { field: 'new_destiny', type: 'list',
                        html: { label: 'Destiny',attr: '<% if(user_info.role.name === "user" && scenarioId === base_scenario ){ %> readonly <%}%> style="width: 100%"' },
                        options: { items: [
                            {id:(maxNodeId + 1),text:'OUT'},
                            <% for(let i =0;i<nodes.length;i++){%>
                            {id:<%=nodes[i].id%>,text:'<%=nodes[i].node_id%>'}, 
                            <%}%>
                        ]},
                    },
                    { field: 'new_min_flow', type: 'float', required: true, editable:true, 
                        html: { label: 'Min. Flow', attr: '<% if(user_info.role.name === "user" && scenarioId === base_scenario ){ %> readonly <%}%> style="width: 100%";' }
                    },
                    { field: 'new_current_flow', type: 'float', required: true, editable:true, 
                        html: { label: 'Current Flow.', attr: 'style="width: 100%";' }
                    },
                    { field: 'new_max_flow', type: 'float', required: true, editable:true, 
                        html: { label: 'Max Flow.', attr: '<% if(user_info.role.name === "user" && scenarioId === base_scenario ){ %> readonly <%}%> style="width: 100%";' }
                    }
                ],
                onChange:function(event){
                    let modifiedField = event.target;
                    let selectedType = flowsForm.record.new_type;

                    if(modifiedField === 'new_type'){
                        
                        if(selectedType.id === 1){
                            w2ui.flowsForm.record.new_origin = {id:(maxNodeId + 1),text:"IN"};
                            w2ui.flowsForm.record.new_destiny = {id:<%=nodes[0].id%>,text:"<%=nodes[0].node_id%>"};

                            w2ui.flowsForm.record.new_min_flow = 0.0;
                            w2ui.flowsForm.record.new_max_flow = 0.0;

                            w2ui.flowsForm.hide('new_min_flow','new_max_flow');

                            w2ui.flowsForm.refresh();
                        }

                        if(selectedType.id === 2){
                            w2ui.flowsForm.record.new_origin = {id:<%=nodes[0].id%>,text:"<%=nodes[0].node_id%>"};
                            w2ui.flowsForm.record.new_destiny = {id:<%=nodes[1].id%>,text:"<%=nodes[1].node_id%>"};
                            w2ui.flowsForm.show('new_min_flow','new_max_flow');
                            w2ui.flowsForm.refresh();
                        }
                    }

                    if(modifiedField === 'new_origin' ){
                        let origin = w2ui.flowsForm.record.new_origin.text;
                        if(selectedType.id === 1 && origin === 'IN'){
                            w2ui.flowsForm.record.new_destiny = {id:<%=nodes[0].id%>,text:"<%=nodes[0].node_id%>"};
                            w2ui.flowsForm.refresh();
                        }
                    }
                    if(modifiedField === 'new_destiny' ){
                        let destiny = w2ui.flowsForm.record.new_destiny.text;
                        if(selectedType.id === 1 && destiny === 'OUT'){
                            w2ui.flowsForm.record.new_origin = {id:<%=nodes[0].id%>,text:"<%=nodes[0].node_id%>"};
                            w2ui.flowsForm.refresh();
                        }
                    }
                },
                actions: {
                    Reset() { 
                        if(isEdit) 
                            setForm(getSelectedRecord());
                        else
                            setForm(getNewEmptyRecord());
                    },
                    Save() { 
                        this.validate(); 

                        let curr_min = flowsForm.record.new_min_flow;
                        let curr_vol = flowsForm.record.new_current_flow;
                        let curr_max = flowsForm.record.new_max_flow;


                        if( flowsForm.record.new_type.id === 2 && flowsForm.record.new_origin.text === 'IN' ){
                            w2alert("Variable Flow can't be INPUT to the system");
                        }

                        if( flowsForm.record.new_type.id === 2 && flowsForm.record.new_destiny.text === 'OUT' ){
                            w2alert("Variable Flow can't be OUTPUT of the system");
                        }

                        if(flowsForm.record.new_type.id === 2 && curr_min > curr_max){
                            w2alert("Min Flow cant be bigger than Max Flow.");
                            return;
                        }

                        if( flowsForm.record.new_type.id === 2 && curr_min > curr_vol){
                            w2alert("Min Flow cant be bigger than current flow.");
                            return;
                        }

                        if(flowsForm.record.new_type.id === 2 && curr_vol > curr_max){
                            w2alert("Current Flow cant be bigger than Max Flow.");
                            return;
                        }

                        if(flowsForm.record.new_type.id === 1 && (flowsForm.record.new_origin.text === 'IN' && flowsForm.record.new_destiny.text === 'OUT')){
                            w2alert("Flow can't be from IN to OUT");
                            return;
                        }

                        if(flowsForm.record.new_type.id === 1 && (flowsForm.record.new_origin.text !== 'IN' && flowsForm.record.new_destiny.text !== 'OUT')){
                            w2alert("Flow must be from IN to internal node or internal node to OUT");
                            return;
                        }

                        if(flowsForm.record.new_origin.id === flowsForm.record.new_destiny.id){
                            w2alert("Invalid Origin and Destiny");
                            return;
                        }
                        

                        if(flowsForm.record.new_origin.text === 'IN')
                            flowsForm.record.new_origin.id = 0;

                        if(flowsForm.record.new_destiny.text === 'OUT')
                            flowsForm.record.new_destiny.id = 0;

                        if(flowsForm.record.new_type.id === 1 && flowsForm.record.new_origin.id === 0 && flowsForm.record.new_destiny.id === 0){
                            w2alert("Invalid Origin and Destiny");
                            return;
                        }

                        let flow = {
                            new_record:!isEdit,
                            scenario_id:flowsForm.record.new_scenario_id,
                            origin:flowsForm.record.new_origin.id,
                            destiny:flowsForm.record.new_destiny.id,
                            type:flowsForm.record.new_type.id,
                            fmin: curr_min ,
                            current_flow: curr_vol,
                            fmax: curr_max
                        }

                        //post to web service and on return, reload page.
                        $.post('/WF/api/saveFlow', flow, function(response){
                            if(response)
                                window.location.reload();
                            else
                                alert("Something went wrong")
                        });
                    }
                }
            });

            w2popup.open({
                title   : 'Flows Form',
                body    : '<div id="flowsForm" style="width: 100%; height: 100%;"></div>',
                style   : 'padding: 15px 0px 0px 0px',
                width   : 400,
                height  : 420,
                showMax : false
            })
            .then((event) => {
                w2ui.flowsForm.render('#flowsForm');
                if(isEdit) 
                    setForm(getSelectedRecord());
                else
                    setForm(getNewEmptyRecord());

            });
        };

        let grid = new w2grid({
            name: 'grid',
            box: '#content-grid',
            header  : '<%=user_info.region.name%> Flows - <%=scenarioId%> - Flows in: <%=capacity_units%>/<%=time_units%>',
            show: {
                header:true,
                toolbar: true,
                <% if(user_info.role.name === 'admin' && scenarioId === base_scenario ){ %>
                //if user is admin and is in the base scenario, then can CRUD the nodes
                toolbarAdd: true,
                toolbarEdit: true,
                toolbarDelete: true
                <%}%>

                <% if(user_info.role.name === 'user' && scenarioId !== base_scenario ){ %>
                //if user is user and is in a custom scenario, then can edit few attrs of the nodes
                toolbarAdd: true,
                toolbarEdit: true,
                toolbarDelete: true
                <%}%>
            },
            searches: [
                { field: 'recid', label: 'ID ', type: 'int' },
                { field: 'origin_node', label: 'Origin', type: 'text' },
                { field: 'destiny_node', label: 'Destiny', type: 'text' },
                { field: 'type', label: 'Type', type: 'text' }
            ],          
            columns: [
                { field: 'recid', text: 'Id',sortable:true,size:'5%' },
                { field: 'origin', hidden:true },
                { field: 'origin_node', text: 'Origin',sortable:true, size:'15%' },
                { field: 'destiny', hidden:true },
                { field: 'destiny_node', text: 'Destiny',sortable:true, size:'15%' },
                { field: 'description', text: 'Description',sortable:false, size:'30%' },
                { field: 'type_id', hidden:true },
                { field: 'type', text: 'Type', size:'11%' },
                { field: 'fmin', text: 'Min F', size:'8%',sortable:true,render:'float:02' },
                { field: 'current_flow', text: 'Current',sortable:true, size:'8%',render:'float:02' },
                { field: 'fmax', text: 'Max F.', size:'8%',sortable:true,render:'float:02' }
            ],
            onAdd: function (event) {
                <%if(nodes.length === 0) { %>   
                    w2alert("There are no nodes!. \nPlease add nodes first to the Topology");
                <%} else {%>
                    event.preventDefault();
                    isEdit = false;
                    openFormPopup();
                <%}%>
            },
            onEdit: function (event) {
                event.preventDefault();
                isEdit = true;
                openFormPopup();
            },
            onDelete: function (event) {
                event.preventDefault();
                let selected = grid.getSelection();
                let rec = grid.get(selected)[0];

                /*
                    According to the model, the IN node is 0 and the OUT node is 0
                    so we need to change the values to match the model.
                */
                if(rec.origin_node === 'IN')
                    rec.origin = 0;
                if(rec.destiny_node === 'OUT')
                    rec.destiny = 0;

                let flow = {
                  scenario_id : '<%=scenarioId%>',
                  origin: rec.origin,
                  destiny: rec.destiny  
                };
                
                w2confirm({
                    msg: 'Do you want to delete this flow?',
                    title: "DELETE flow",
                    width: 450,        // width of the dialog
                    height: 220,       // height of the dialog
                    btn_yes: {
                        text: 'yes',   // text for yes button (or yes_text)
                        class: 'btn-danger',     // class for yes button (or yes_class)
                        style: 'background-color:red;',     // style for yes button (or yes_style)
                        onClick: null  // callBack for yes button (or yes_callBack)
                    },
                    btn_no: {
                        text: 'No',    // text for no button (or no_text)
                        class: '',     // class for no button (or no_class)
                        style: '',     // style for no button (or no_style)
                        onClick: null  // callBack for no button (or no_callBack)
                    },
                    callBack: function(answer){
                        if(answer === 'yes'){
                            $.post('/WF/api/deleteFlow', flow, function(respuesta){
                                if(respuesta)
                                    window.location.reload();
                                else
                                    alert("Something went wrong")
                            });
                        } 
                    }
                });
            }
        });
    </script>
</head>
<body>
    <div class="container-fluid" style="width:100%;height:100%;">
        <div id="content-grid" style="width:95%;height:95%;margin: 5px;">
        </div>
    </div>
</body>
</html>